#!/usr/bin/env perl
use v5.14.1;
use Pod::Usage;
use Getopt::Long;
use JSON::API;
use JSON::PP;
use List::Util qw(any);
use Sort::Key::Natural qw(natsort);

use Cwd qw(abs_path);
use FindBin;
use Catmandu -load => [abs_path("$FindBin::Bin/..")], -all;
use lib abs_path("$FindBin::Bin/../lib");
use ColiRich qw(getConcept getScheme mappingTypeByUri getMappings);
use MappingFilter;

GetOptions( \my %opt, 'help|?', 'language|l=s', 'config|c=s', 'depth|d=i', 'full|f', 'json|j=s' )
  or pod2usage(2);
pod2usage( -verbose => 99, -sections => [qw(SYNOPSIS OPTIONS EXAMPLES)] )
  if $opt{help} or !@ARGV;

pod2usage("missing schemes argument") if @ARGV < 1;
pod2usage("missing concept(s)")       if @ARGV < 2;

my $filter = new MappingFilter($opt{config} || 'mapping-table.yaml');

my ( $from, $to ) = map { getScheme(notation => $_) or pod2usage("unknown scheme $_") }
  map { uc $_ } split /-/, shift @ARGV;

my $table = buildTable(shift @ARGV, 0);

if (@ARGV) {
  my $exporter = Catmandu->exporter('JSON', pretty => 1, array => 0, file => shift @ARGV);
  $exporter->add($table);
}

sub buildTable {
    my ($notation, $depth) = @_;

    my $concept = getConcept(
        $from,
        notation   => $notation,
        properties => "narrower"
    );
    if ($concept) {
        # reduce data to simplify intellectual inspection
        delete $concept->{$_} for grep { $_ !~ /uri|prefLabel|notation|narrower/ } keys %$concept;
       
        my $children = $concept->{narrower};
        $children = undef if $children && !$children->[0];

        my $done;
        my @mappings = grep { $filter->filter($_) } getMappings( $from, $to, $notation );

        # reduce data to simplify intellectual inspection
        for my $m (@mappings) {
            delete $m->{$_} for grep { $_ !~ /^(uri|type|to)$/ } keys %$m;
        }

        if (@mappings) {
            
            for ( my $i = 0 ; $i < @mappings ; $i++ ) {
                my $m = $mappings[$i];

                my @targets = map { getConcept(
                    $to,
                    notation   => $_->{notation}[0],
                    properties => 'narrower'
                ) } @{ $m->{to}{memberSet} };

                if (@targets) {
                    # 1-n mappings are done if one member is a leaf
                    $done = !$children || any { !@{$_->{narrower} || []} } @targets;
                    $m->{DONE} = $done ? JSON::PP::true : JSON::PP::false;
                }

                status( $concept, $depth, $m, $i );
            }

            $concept->{mappings} = \@mappings;
        }
        else {
            status($concept, $depth);
        }

        my $proceed = $children && (!$done || $opt{full});
        if ($proceed && (!$opt{depth} || $depth < $opt{depth} - 1)) {
            for (natsort map { $_->{notation}[0] } @$children) {
                push @{$concept->{narrower}}, buildTable($_, $depth + 1);
            }
        }
    }

    return $concept;
}

sub status {
    my ( $concept, $depth, $mapping, $etc ) = @_;

    my $notation = $concept->{notation}[0];
    my $width    = 50;

    if ($etc) {
        print " " x $width;
    }
    else {
        $width = $width - $depth;
        print " " x $depth;
        printf "%-${width}s", $notation;
    }

    if ($mapping) {
        my $toConcepts = $mapping->{to}{memberSet};
        my $to = join ' ∩ ', map { $_->{notation}[0] } @$toConcepts;

        my $type = mappingTypeByUri($mapping->{type}[0]);
        $type = $type ? $type->{notation}[0] : '→ ';

        print "$type $to";
        print " $mapping->{uri}" if $mapping;
        print " ✓" if $mapping->{DONE};
    }
    elsif ( my $lang = $opt{language} ) {
        print $concept->{prefLabel}{$lang};
    }

    say "";
}

=head1 SYNOPSIS

 mapping-table [options] <schemes> <concept> [<result>]

=head1 OPTIONS
 
 --help|-h       this help message
 --language|-l   include label in given language if concept not mapped
 --depth|-d      maximum depth to traverse to with first concept at 1
 --config|-c     YAML file to load rules from (default: mapping-table.yaml)
 --full|-f       include all concepts even if covered by a broader concept

=head1 EXAMPLES

 mapping-table nsk-bk The -l en
 mapping-table ddc-bk 949 -l de -d 2
 mapping-table rvk-bk WE -l de -c trusted.yaml rvk-bk-WE.json

=cut
