#!/usr/bin/env perl
use v5.14.1;
use Pod::Usage;
use Getopt::Long;
use JSON::API;
use Catmandu;
use List::Util qw(any);

use Cwd qw(abs_path);
use FindBin;
use lib abs_path("$FindBin::Bin/../lib");
use ColiRich qw(getConcept getScheme mappingTypeByUri getMappings);

GetOptions( \my %opt, 'help|?', 'language|l=s', 'trust|t=s', 'depth|d=i', 'full|f' )
  or pod2usage(2);
pod2usage( -verbose => 99, -sections => [qw(SYNOPSIS OPTIONS EXAMPLES)] )
  if $opt{help} or !@ARGV;

pod2usage("missing schemes argument") if @ARGV < 1;
pod2usage("missing concept(s)")       if @ARGV < 2;

my $trust =
  $opt{trust} ? Catmandu->importer( 'YAML', file => $opt{trust} )->next : {};

my ( $from, $to ) = map { getScheme(notation => $_) or pod2usage("unknown scheme $_") }
  map { uc $_ } split /-/, shift @ARGV;

buildTable($_, 0) for @ARGV;

sub buildTable {
    my ($notation, $depth) = @_;

    my $concept = getConcept(
        $from,
        notation   => $notation,
        properties => "narrower"
    );
    if ($concept) {
        
        my $children = $concept->{narrower};
        $children = undef if $children && !$children->[0];

        my $mapped;
        my @mappings = getMappings( $from, $to, $notation, $trust );

        if (@mappings) {
            
            for ( my $i = 0 ; $i < @mappings ; $i++ ) {
                my $m = $mappings[$i];

                my @targets = map { getConcept(
                    $to,
                    notation   => $_->{notation}[0],
                    properties => 'narrower'
                ) } @{ $m->{to}{memberSet} };

                if (@targets) {
                    # 1-n mappings are done if one member is a leaf
                    $mapped = !$children || any { !@{$_->{narrower} || []} } @targets;
                }

                status( $concept, $depth, $m, $mapped && !$opt{full}, $i );
            }
        }
        else {
            status($concept, $depth);
        }

        if ($children && (!$opt{depth} || $depth < $opt{depth} - 1) && !$mapped) {
            buildTable($_->{notation}[0], $depth + 1) for @$children;
        }
    }
}

sub status {
    my ( $concept, $depth, $mapping, $mapped, $etc ) = @_;

    my $notation = $concept->{notation}[0];
    my $width    = 50;

    if ($etc) {
        print " " x $width;
    }
    else {
        $width = $width - $depth;
        print " " x $depth;
        printf "%-${width}s", $notation;
    }

    if ($mapping) {
        my $toConcepts = $mapping->{to}{memberSet};
        my $to = join ' ∩ ', map { $_->{notation}[0] } @$toConcepts;

        my $type = mappingTypeByUri($mapping->{type}[0]);
        $type = $type ? $type->{notation}[0] : '→ ';

        print "$type $to";
        print " $mapping->{uri}" if $mapping;
        print " ✓" if $mapped;
    }
    elsif ( my $lang = $opt{language} ) {
        print $concept->{prefLabel}{$lang};
    }

    say "";
}

=head1 SYNOPSIS

 mapping-table [options] <scheme> <scheme> <concept...>

=head1 OPTIONS
 
 --help|-h       this help message
 --language|-l   include label in given language if concept not mapped
 --depth|-d      maximum depth to traverse to with first concept at 1
 --trust|-t      YAML file to load trust rules from
 --full|-f       include all classes even if covered by a broader concept

=head1 EXAMPLES

 mapping-table nsk-bk The -l en
 mapping-table ddc-bk 949 -l de -d 2
 mapping-table rvk-bk WE -l de -t trusted-rvk.yaml

=cut
